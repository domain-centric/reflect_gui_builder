import 'package:flutter/widgets.dart';
import 'package:reflect_gui_builder/builder/reflect_gui_config_builder.dart';

import '../documentation.dart';
import '../domain_class/domain_class_reflection.dart';

/// ## [ActionMethod]
///
/// [ActionMethod]s are methods in a [ServiceObject] or [DomainObject] that
/// comply with a set of rules and are therefore recognized by the
/// [ReflectFramework].
///
/// [ActionMethod]s are displayed as menu items in a [ReflectGuiApplication]
/// or as commands in other types of [ReflectApplication]s.
///
/// A method needs to comply to the following rules to be considered a [ActionMethod] if:
/// - the method is in a [ServiceObject] or [DomainObject]
/// - and the method is public (method name does not start with an underscore)
/// - and there is a [ActionMethodParameterProcessor]
///   that can process the method parameter signature.
/// - and there is a [ActionMethodResultProcessor]
///   that can process the method result.
abstract class ActionMethod implements ConceptDocumentation {}

/// Contains information on a [ActionMethod]
/// The implementations of this class are generated by the [ReflectGuiConfigBuilder]
abstract class ActionMethodReflection { //TODO implements DynamicItem {
  Object get methodOwner;
  IconData get icon;
  /// Returns a DomainClassReflection if the [ActionMethod] parameter is a [DomainClass]
  DomainClassReflection? get parameterDomainReflection;
  /// Returns a DomainClassReflection if the [ActionMethod] result is a [DomainClass]
  DomainClassReflection? get resultDomainReflection;
}

abstract class StartWithoutParameter implements ActionMethodReflection {
  /// Starts the ActionMethod process (e.g. when clicking on a menu button)
  /// This is implemented on a ActionMethodInfoWithoutParameter or ActionMethodInfoWithParameter and there is an parameter factory
  /// It:
  /// - calls the _createParameter() method (if it exists)
  /// - and then calls the _processParameter() method if it has a parameter
  /// - otherwise it will call invokeMethodAndProcessResult()
  /// - it will handle any exceptions that could be thrown
  void start(BuildContext context);
}

abstract class StartWithParameter<T> implements ActionMethodReflection {
  /// Starts the ActionMethod process (e.g. when clicking on a menu button)
  /// This is implemented on a ActionMethodInfoWithParameter
  /// It:
  /// - calls the _processParameter() method
  /// - it will handle any exceptions that could be thrown
  void start(BuildContext context, T parameter);

}

abstract class InvokeWithoutParameter implements ActionMethodReflection {
  /// This method is only called by [ActionMethodReflection.start]
  void invokeMethodAndProcessResult(BuildContext context);
}

abstract class InvokeWithParameter<T> implements ActionMethodReflection {
  /// This method should only be called by a [ActionMethodParameterProcessor]
  /// (which might be delegated to a form ok or a dialog ok button)
  /// It:
  /// - invokes the method
  /// - and then calls the [ActionMethodResultProcessor] to process the results
  /// - it will handle any exceptions that could be thrown
  void invokeMethodAndProcessResult(BuildContext context, T parameter);
}

// /// [ServiceObjectActionMethod]s are displayed on the main menu of an [ReflectGuiApplication] or are commands that can be accessed from the outside world in other type of [ReflectApplications]
// abstract class ServiceObjectActionMethodInfo extends ActionMethodInfo {
//   ServiceClassInfo get serviceObjectInfo;
// }

/// TODO explain what it does
class ActionMethodParameterFactory {}
